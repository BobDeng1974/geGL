
//  Dylib.h
//  GPUEngine
//  Created by Marcel Kiss on 26/09/2018.

#pragma once

#include <stdlib.h>
#include <stdio.h>
#include <dlfcn.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Turn ON/OFF error messages generated by dl_open_lib(), dl_close_lib() and
 dl_symbol(). Messages are generated using dlerror() and printed to stderr. */
#define DYLIB_ERROR_MESSAGES  1

/** Wraps function dlopen() and print dlerror() message if error occured. */
void* dl_open_lib(char const *lib_name);

/** Wraps function dlclose() and print dlerror() message if error occured. */
int dl_close_lib(void *lib);
    
/** Wraps function dlsym() and print dlerror() message if error occured. */
void* dl_symbol(void *lib, char const *sym_name);

#undef DYLIB_ERROR_MESSAGES


#if defined(__APPLE__)

/* About macOS frameworks:
 Some dynamic libraries are packed into frameworks in macOS. Function dlopen() is able to detect and search
 for frameworks if input path looks like framework path (e.g. /stuff/Foo.framework/Foo). Load them (or only
 it's part by adding additional subpath) by passing full framework name in format 'Foo.framework/Foo' for
 framework named 'Foo'. Default fallback search paths (if DYLD_FALLBACK_FRAMEWORK_PATH was not set) ensure
 that framework is searched in usual directories (for more information see '$ man dlopen'):
    $HOME/Library/Frameworks, /Library/Frameworks, /Network/Library/Frameworks, /System/Library/Frameworks
 */

/** Loads framework by name using dl_open_lib(). This function is shortcut to easily load frameworks
 with just it's name. If framework name is NULL or empty string, the unchanged parameter is passed.
 Full framework name is computed only if given framework's name has length at least one character. */
void* dl_open_framework(const char *fw_name);

#endif
    
#ifdef __cplusplus
}
#endif
